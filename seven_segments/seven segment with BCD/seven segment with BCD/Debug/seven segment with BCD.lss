
seven segment with BCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000005e6  0000065a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000065c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00000db0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000841  00000000  00000000  00000e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000280  00000000  00000000  000016b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004e2  00000000  00000000  00001931  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  00001e14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000264  00000000  00000000  00001f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000527  00000000  00000000  000021ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <main>
  8a:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BCD_Lnibble_dir>:
#include "BCD_SevenSegments_decoder.h"
#include <util/delay.h>

void BCD_Lnibble_dir(unsigned char port)
{
	dio_Lnibble_dir(port);
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 84 02 	call	0x508	; 0x508 <dio_Lnibble_dir>
}
  98:	08 95       	ret

0000009a <BCD_Lnibble_val>:

void BCD_Lnibble_val(unsigned char port,unsigned char value)
{
	dio_Lnibble_val(port,value);
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	70 e0       	ldi	r23, 0x00	; 0
  9e:	0e 94 c8 02 	call	0x590	; 0x590 <dio_Lnibble_val>
}
  a2:	08 95       	ret

000000a4 <BCD_Hnibble_dir>:

void BCD_Hnibble_dir(unsigned char port)
{
	dio_Hnibble_dir(port);
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 68 02 	call	0x4d0	; 0x4d0 <dio_Hnibble_dir>
}
  aa:	08 95       	ret

000000ac <BCD_Hnibble_val>:

void BCD_Hnibble_val(unsigned char port,unsigned char value)
{
	dio_Hnibble_val(port,value);
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	0e 94 a0 02 	call	0x540	; 0x540 <dio_Hnibble_val>
}
  b4:	08 95       	ret

000000b6 <BCD_Lnibble_Bitdir>:

void BCD_Lnibble_Bitdir(unsigned char port)
{
  b6:	cf 93       	push	r28
  b8:	c8 2f       	mov	r28, r24
	dio_pindir(port,0,1);
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	41 e0       	ldi	r20, 0x01	; 1
  c2:	50 e0       	ldi	r21, 0x00	; 0
  c4:	0e 94 2e 01 	call	0x25c	; 0x25c <dio_pindir>
	dio_pindir(port,1,1);
  c8:	8c 2f       	mov	r24, r28
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	61 e0       	ldi	r22, 0x01	; 1
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	41 e0       	ldi	r20, 0x01	; 1
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	0e 94 2e 01 	call	0x25c	; 0x25c <dio_pindir>
	dio_pindir(port,2,1);
  d8:	8c 2f       	mov	r24, r28
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	62 e0       	ldi	r22, 0x02	; 2
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	41 e0       	ldi	r20, 0x01	; 1
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	0e 94 2e 01 	call	0x25c	; 0x25c <dio_pindir>
	dio_pindir(port,3,1);
  e8:	8c 2f       	mov	r24, r28
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	63 e0       	ldi	r22, 0x03	; 3
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	41 e0       	ldi	r20, 0x01	; 1
  f2:	50 e0       	ldi	r21, 0x00	; 0
  f4:	0e 94 2e 01 	call	0x25c	; 0x25c <dio_pindir>
}
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <BCD_Lnibble_Bitval>:

void BCD_Lnibble_Bitval(unsigned char port,unsigned char value)
{
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	d8 2f       	mov	r29, r24
 102:	c6 2f       	mov	r28, r22
	dio_pinval(port,0,dio_readbit(value,0));
 104:	86 2f       	mov	r24, r22
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	0e 94 32 02 	call	0x464	; 0x464 <dio_readbit>
 110:	ac 01       	movw	r20, r24
 112:	8d 2f       	mov	r24, r29
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	0e 94 b0 01 	call	0x360	; 0x360 <dio_pinval>
	dio_pinval(port,1,dio_readbit(value,1));
 11e:	8c 2f       	mov	r24, r28
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	0e 94 32 02 	call	0x464	; 0x464 <dio_readbit>
 12a:	ac 01       	movw	r20, r24
 12c:	8d 2f       	mov	r24, r29
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	61 e0       	ldi	r22, 0x01	; 1
 132:	70 e0       	ldi	r23, 0x00	; 0
 134:	0e 94 b0 01 	call	0x360	; 0x360 <dio_pinval>
	dio_pinval(port,2,dio_readbit(value,2));
 138:	8c 2f       	mov	r24, r28
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	62 e0       	ldi	r22, 0x02	; 2
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	0e 94 32 02 	call	0x464	; 0x464 <dio_readbit>
 144:	ac 01       	movw	r20, r24
 146:	8d 2f       	mov	r24, r29
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	62 e0       	ldi	r22, 0x02	; 2
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	0e 94 b0 01 	call	0x360	; 0x360 <dio_pinval>
	dio_pinval(port,3,dio_readbit(value,3));
 152:	8c 2f       	mov	r24, r28
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	63 e0       	ldi	r22, 0x03	; 3
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	0e 94 32 02 	call	0x464	; 0x464 <dio_readbit>
 15e:	ac 01       	movw	r20, r24
 160:	8d 2f       	mov	r24, r29
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	63 e0       	ldi	r22, 0x03	; 3
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	0e 94 b0 01 	call	0x360	; 0x360 <dio_pinval>
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <BCD_Hnibble_Bitdir>:

void BCD_Hnibble_Bitdir(unsigned char port)
{
 172:	cf 93       	push	r28
 174:	c8 2f       	mov	r28, r24
	dio_pindir(port,4,1);
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	64 e0       	ldi	r22, 0x04	; 4
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	41 e0       	ldi	r20, 0x01	; 1
 17e:	50 e0       	ldi	r21, 0x00	; 0
 180:	0e 94 2e 01 	call	0x25c	; 0x25c <dio_pindir>
	dio_pindir(port,5,1);
 184:	8c 2f       	mov	r24, r28
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	65 e0       	ldi	r22, 0x05	; 5
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	41 e0       	ldi	r20, 0x01	; 1
 18e:	50 e0       	ldi	r21, 0x00	; 0
 190:	0e 94 2e 01 	call	0x25c	; 0x25c <dio_pindir>
	dio_pindir(port,6,1);
 194:	8c 2f       	mov	r24, r28
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	66 e0       	ldi	r22, 0x06	; 6
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	41 e0       	ldi	r20, 0x01	; 1
 19e:	50 e0       	ldi	r21, 0x00	; 0
 1a0:	0e 94 2e 01 	call	0x25c	; 0x25c <dio_pindir>
	dio_pindir(port,7,1);
 1a4:	8c 2f       	mov	r24, r28
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	67 e0       	ldi	r22, 0x07	; 7
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	41 e0       	ldi	r20, 0x01	; 1
 1ae:	50 e0       	ldi	r21, 0x00	; 0
 1b0:	0e 94 2e 01 	call	0x25c	; 0x25c <dio_pindir>
}
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <BCD_Hnibble_Bitval>:

void BCD_Hnibble_Bitval(unsigned char port,unsigned char value)
{
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	d8 2f       	mov	r29, r24
 1be:	c6 2f       	mov	r28, r22
	dio_pinval(port,4,dio_readbit(value,0));//0~9 numbers in the low nibble
 1c0:	86 2f       	mov	r24, r22
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	0e 94 32 02 	call	0x464	; 0x464 <dio_readbit>
 1cc:	ac 01       	movw	r20, r24
 1ce:	8d 2f       	mov	r24, r29
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	64 e0       	ldi	r22, 0x04	; 4
 1d4:	70 e0       	ldi	r23, 0x00	; 0
 1d6:	0e 94 b0 01 	call	0x360	; 0x360 <dio_pinval>
	dio_pinval(port,5,dio_readbit(value,1));
 1da:	8c 2f       	mov	r24, r28
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	0e 94 32 02 	call	0x464	; 0x464 <dio_readbit>
 1e6:	ac 01       	movw	r20, r24
 1e8:	8d 2f       	mov	r24, r29
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	65 e0       	ldi	r22, 0x05	; 5
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	0e 94 b0 01 	call	0x360	; 0x360 <dio_pinval>
	dio_pinval(port,6,dio_readbit(value,2));
 1f4:	8c 2f       	mov	r24, r28
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	62 e0       	ldi	r22, 0x02	; 2
 1fa:	70 e0       	ldi	r23, 0x00	; 0
 1fc:	0e 94 32 02 	call	0x464	; 0x464 <dio_readbit>
 200:	ac 01       	movw	r20, r24
 202:	8d 2f       	mov	r24, r29
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	66 e0       	ldi	r22, 0x06	; 6
 208:	70 e0       	ldi	r23, 0x00	; 0
 20a:	0e 94 b0 01 	call	0x360	; 0x360 <dio_pinval>
	dio_pinval(port,7,dio_readbit(value,3));
 20e:	8c 2f       	mov	r24, r28
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	63 e0       	ldi	r22, 0x03	; 3
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	0e 94 32 02 	call	0x464	; 0x464 <dio_readbit>
 21a:	ac 01       	movw	r20, r24
 21c:	8d 2f       	mov	r24, r29
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	67 e0       	ldi	r22, 0x07	; 7
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	0e 94 b0 01 	call	0x360	; 0x360 <dio_pinval>
}
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <test_case>:


void test_case(void)
{
	//1st test case
	BCD_Lnibble_dir('A');
 22e:	81 e4       	ldi	r24, 0x41	; 65
 230:	0e 94 49 00 	call	0x92	; 0x92 <BCD_Lnibble_dir>
	while(1)
	{
		for(unsigned char counter=0;counter<=9;counter++)
 234:	c0 e0       	ldi	r28, 0x00	; 0
 236:	d0 e0       	ldi	r29, 0x00	; 0
		{
			BCD_Lnibble_val('A',counter);
 238:	81 e4       	ldi	r24, 0x41	; 65
 23a:	6c 2f       	mov	r22, r28
 23c:	0e 94 4d 00 	call	0x9a	; 0x9a <BCD_Lnibble_val>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 240:	8f e7       	ldi	r24, 0x7F	; 127
 242:	9a e1       	ldi	r25, 0x1A	; 26
 244:	a6 e0       	ldi	r26, 0x06	; 6
 246:	81 50       	subi	r24, 0x01	; 1
 248:	90 40       	sbci	r25, 0x00	; 0
 24a:	a0 40       	sbci	r26, 0x00	; 0
 24c:	e1 f7       	brne	.-8      	; 0x246 <test_case+0x18>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <test_case+0x22>
 250:	00 00       	nop
{
	//1st test case
	BCD_Lnibble_dir('A');
	while(1)
	{
		for(unsigned char counter=0;counter<=9;counter++)
 252:	cf 5f       	subi	r28, 0xFF	; 255
 254:	ca 30       	cpi	r28, 0x0A	; 10
 256:	80 f3       	brcs	.-32     	; 0x238 <test_case+0xa>
 258:	cd 2f       	mov	r28, r29
 25a:	ee cf       	rjmp	.-36     	; 0x238 <test_case+0xa>

0000025c <dio_pindir>:
#include "macros.h"
#include "DIO.h"

void dio_pindir(unsigned char port,unsigned char pin,unsigned char dir)
{
	switch(port)
 25c:	82 34       	cpi	r24, 0x42	; 66
 25e:	49 f1       	breq	.+82     	; 0x2b2 <dio_pindir+0x56>
 260:	83 34       	cpi	r24, 0x43	; 67
 262:	20 f4       	brcc	.+8      	; 0x26c <dio_pindir+0x10>
 264:	81 34       	cpi	r24, 0x41	; 65
 266:	09 f0       	breq	.+2      	; 0x26a <dio_pindir+0xe>
 268:	7a c0       	rjmp	.+244    	; 0x35e <dio_pindir+0x102>
 26a:	06 c0       	rjmp	.+12     	; 0x278 <dio_pindir+0x1c>
 26c:	83 34       	cpi	r24, 0x43	; 67
 26e:	f1 f1       	breq	.+124    	; 0x2ec <dio_pindir+0x90>
 270:	84 34       	cpi	r24, 0x44	; 68
 272:	09 f0       	breq	.+2      	; 0x276 <dio_pindir+0x1a>
 274:	74 c0       	rjmp	.+232    	; 0x35e <dio_pindir+0x102>
 276:	57 c0       	rjmp	.+174    	; 0x326 <dio_pindir+0xca>
	{
		case 'A':
		if(dir)
 278:	44 23       	and	r20, r20
 27a:	69 f0       	breq	.+26     	; 0x296 <dio_pindir+0x3a>
		{
			setbit(DDRA,pin);
 27c:	4a b3       	in	r20, 0x1a	; 26
 27e:	21 e0       	ldi	r18, 0x01	; 1
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	c9 01       	movw	r24, r18
 284:	06 2e       	mov	r0, r22
 286:	02 c0       	rjmp	.+4      	; 0x28c <dio_pindir+0x30>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	0a 94       	dec	r0
 28e:	e2 f7       	brpl	.-8      	; 0x288 <dio_pindir+0x2c>
 290:	84 2b       	or	r24, r20
 292:	8a bb       	out	0x1a, r24	; 26
 294:	10 c0       	rjmp	.+32     	; 0x2b6 <dio_pindir+0x5a>
		}
		else
		{
			clrbit(DDRA,pin);
 296:	4a b3       	in	r20, 0x1a	; 26
 298:	21 e0       	ldi	r18, 0x01	; 1
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	c9 01       	movw	r24, r18
 29e:	06 2e       	mov	r0, r22
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <dio_pindir+0x4a>
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	0a 94       	dec	r0
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <dio_pindir+0x46>
 2aa:	80 95       	com	r24
 2ac:	84 23       	and	r24, r20
 2ae:	8a bb       	out	0x1a, r24	; 26
 2b0:	0f c0       	rjmp	.+30     	; 0x2d0 <dio_pindir+0x74>
		}
		case 'B':
		if(dir)
 2b2:	44 23       	and	r20, r20
 2b4:	69 f0       	breq	.+26     	; 0x2d0 <dio_pindir+0x74>
		{
			setbit(DDRB,pin);
 2b6:	47 b3       	in	r20, 0x17	; 23
 2b8:	21 e0       	ldi	r18, 0x01	; 1
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	c9 01       	movw	r24, r18
 2be:	06 2e       	mov	r0, r22
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <dio_pindir+0x6a>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	0a 94       	dec	r0
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <dio_pindir+0x66>
 2ca:	84 2b       	or	r24, r20
 2cc:	87 bb       	out	0x17, r24	; 23
 2ce:	10 c0       	rjmp	.+32     	; 0x2f0 <dio_pindir+0x94>
		}
		else
		{
			clrbit(DDRB,pin);
 2d0:	47 b3       	in	r20, 0x17	; 23
 2d2:	21 e0       	ldi	r18, 0x01	; 1
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	c9 01       	movw	r24, r18
 2d8:	06 2e       	mov	r0, r22
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <dio_pindir+0x84>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	0a 94       	dec	r0
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <dio_pindir+0x80>
 2e4:	80 95       	com	r24
 2e6:	84 23       	and	r24, r20
 2e8:	87 bb       	out	0x17, r24	; 23
 2ea:	0f c0       	rjmp	.+30     	; 0x30a <dio_pindir+0xae>
		}
		case 'C':
		if(dir)
 2ec:	44 23       	and	r20, r20
 2ee:	69 f0       	breq	.+26     	; 0x30a <dio_pindir+0xae>
		{
			setbit(DDRC,pin);
 2f0:	44 b3       	in	r20, 0x14	; 20
 2f2:	21 e0       	ldi	r18, 0x01	; 1
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	c9 01       	movw	r24, r18
 2f8:	06 2e       	mov	r0, r22
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <dio_pindir+0xa4>
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	0a 94       	dec	r0
 302:	e2 f7       	brpl	.-8      	; 0x2fc <dio_pindir+0xa0>
 304:	84 2b       	or	r24, r20
 306:	84 bb       	out	0x14, r24	; 20
 308:	10 c0       	rjmp	.+32     	; 0x32a <dio_pindir+0xce>
		}
		else
		{
			clrbit(DDRC,pin);
 30a:	44 b3       	in	r20, 0x14	; 20
 30c:	21 e0       	ldi	r18, 0x01	; 1
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	c9 01       	movw	r24, r18
 312:	06 2e       	mov	r0, r22
 314:	02 c0       	rjmp	.+4      	; 0x31a <dio_pindir+0xbe>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <dio_pindir+0xba>
 31e:	80 95       	com	r24
 320:	84 23       	and	r24, r20
 322:	84 bb       	out	0x14, r24	; 20
 324:	0f c0       	rjmp	.+30     	; 0x344 <dio_pindir+0xe8>
		}
		case 'D':
		if(dir)
 326:	44 23       	and	r20, r20
 328:	69 f0       	breq	.+26     	; 0x344 <dio_pindir+0xe8>
		{
			setbit(DDRD,pin);
 32a:	21 b3       	in	r18, 0x11	; 17
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	ac 01       	movw	r20, r24
 332:	02 c0       	rjmp	.+4      	; 0x338 <dio_pindir+0xdc>
 334:	44 0f       	add	r20, r20
 336:	55 1f       	adc	r21, r21
 338:	6a 95       	dec	r22
 33a:	e2 f7       	brpl	.-8      	; 0x334 <dio_pindir+0xd8>
 33c:	ba 01       	movw	r22, r20
 33e:	62 2b       	or	r22, r18
 340:	61 bb       	out	0x11, r22	; 17
 342:	08 95       	ret
		}
		else
		{
			clrbit(DDRD,pin);
 344:	21 b3       	in	r18, 0x11	; 17
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	ac 01       	movw	r20, r24
 34c:	02 c0       	rjmp	.+4      	; 0x352 <dio_pindir+0xf6>
 34e:	44 0f       	add	r20, r20
 350:	55 1f       	adc	r21, r21
 352:	6a 95       	dec	r22
 354:	e2 f7       	brpl	.-8      	; 0x34e <dio_pindir+0xf2>
 356:	ba 01       	movw	r22, r20
 358:	60 95       	com	r22
 35a:	62 23       	and	r22, r18
 35c:	61 bb       	out	0x11, r22	; 17
 35e:	08 95       	ret

00000360 <dio_pinval>:
	}
}

void dio_pinval(unsigned char port,unsigned char pin,unsigned char val)
{
	switch(port)
 360:	82 34       	cpi	r24, 0x42	; 66
 362:	49 f1       	breq	.+82     	; 0x3b6 <dio_pinval+0x56>
 364:	83 34       	cpi	r24, 0x43	; 67
 366:	20 f4       	brcc	.+8      	; 0x370 <dio_pinval+0x10>
 368:	81 34       	cpi	r24, 0x41	; 65
 36a:	09 f0       	breq	.+2      	; 0x36e <dio_pinval+0xe>
 36c:	7a c0       	rjmp	.+244    	; 0x462 <dio_pinval+0x102>
 36e:	06 c0       	rjmp	.+12     	; 0x37c <dio_pinval+0x1c>
 370:	83 34       	cpi	r24, 0x43	; 67
 372:	f1 f1       	breq	.+124    	; 0x3f0 <dio_pinval+0x90>
 374:	84 34       	cpi	r24, 0x44	; 68
 376:	09 f0       	breq	.+2      	; 0x37a <dio_pinval+0x1a>
 378:	74 c0       	rjmp	.+232    	; 0x462 <dio_pinval+0x102>
 37a:	57 c0       	rjmp	.+174    	; 0x42a <dio_pinval+0xca>
	{
		case 'A':
		if(val)
 37c:	44 23       	and	r20, r20
 37e:	69 f0       	breq	.+26     	; 0x39a <dio_pinval+0x3a>
		{
			setbit(PORTA,pin);
 380:	4b b3       	in	r20, 0x1b	; 27
 382:	21 e0       	ldi	r18, 0x01	; 1
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	c9 01       	movw	r24, r18
 388:	06 2e       	mov	r0, r22
 38a:	02 c0       	rjmp	.+4      	; 0x390 <dio_pinval+0x30>
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	0a 94       	dec	r0
 392:	e2 f7       	brpl	.-8      	; 0x38c <dio_pinval+0x2c>
 394:	84 2b       	or	r24, r20
 396:	8b bb       	out	0x1b, r24	; 27
 398:	10 c0       	rjmp	.+32     	; 0x3ba <dio_pinval+0x5a>
		}
		else
		{
			clrbit(PORTA,pin);
 39a:	4b b3       	in	r20, 0x1b	; 27
 39c:	21 e0       	ldi	r18, 0x01	; 1
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	c9 01       	movw	r24, r18
 3a2:	06 2e       	mov	r0, r22
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <dio_pinval+0x4a>
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	0a 94       	dec	r0
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <dio_pinval+0x46>
 3ae:	80 95       	com	r24
 3b0:	84 23       	and	r24, r20
 3b2:	8b bb       	out	0x1b, r24	; 27
 3b4:	0f c0       	rjmp	.+30     	; 0x3d4 <dio_pinval+0x74>
		}
		case 'B':
		if(val)
 3b6:	44 23       	and	r20, r20
 3b8:	69 f0       	breq	.+26     	; 0x3d4 <dio_pinval+0x74>
		{
			setbit(PORTB,pin);
 3ba:	48 b3       	in	r20, 0x18	; 24
 3bc:	21 e0       	ldi	r18, 0x01	; 1
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	c9 01       	movw	r24, r18
 3c2:	06 2e       	mov	r0, r22
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <dio_pinval+0x6a>
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	0a 94       	dec	r0
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <dio_pinval+0x66>
 3ce:	84 2b       	or	r24, r20
 3d0:	88 bb       	out	0x18, r24	; 24
 3d2:	10 c0       	rjmp	.+32     	; 0x3f4 <dio_pinval+0x94>
		}
		else
		{
			clrbit(PORTB,pin);
 3d4:	48 b3       	in	r20, 0x18	; 24
 3d6:	21 e0       	ldi	r18, 0x01	; 1
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	c9 01       	movw	r24, r18
 3dc:	06 2e       	mov	r0, r22
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <dio_pinval+0x84>
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	0a 94       	dec	r0
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <dio_pinval+0x80>
 3e8:	80 95       	com	r24
 3ea:	84 23       	and	r24, r20
 3ec:	88 bb       	out	0x18, r24	; 24
 3ee:	0f c0       	rjmp	.+30     	; 0x40e <dio_pinval+0xae>
		}
		case 'C':
		if(val)
 3f0:	44 23       	and	r20, r20
 3f2:	69 f0       	breq	.+26     	; 0x40e <dio_pinval+0xae>
		{
			setbit(PORTC,pin);
 3f4:	45 b3       	in	r20, 0x15	; 21
 3f6:	21 e0       	ldi	r18, 0x01	; 1
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	c9 01       	movw	r24, r18
 3fc:	06 2e       	mov	r0, r22
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <dio_pinval+0xa4>
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	0a 94       	dec	r0
 406:	e2 f7       	brpl	.-8      	; 0x400 <dio_pinval+0xa0>
 408:	84 2b       	or	r24, r20
 40a:	85 bb       	out	0x15, r24	; 21
 40c:	10 c0       	rjmp	.+32     	; 0x42e <dio_pinval+0xce>
		}
		else
		{
			clrbit(PORTC,pin);
 40e:	45 b3       	in	r20, 0x15	; 21
 410:	21 e0       	ldi	r18, 0x01	; 1
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	c9 01       	movw	r24, r18
 416:	06 2e       	mov	r0, r22
 418:	02 c0       	rjmp	.+4      	; 0x41e <dio_pinval+0xbe>
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	0a 94       	dec	r0
 420:	e2 f7       	brpl	.-8      	; 0x41a <dio_pinval+0xba>
 422:	80 95       	com	r24
 424:	84 23       	and	r24, r20
 426:	85 bb       	out	0x15, r24	; 21
 428:	0f c0       	rjmp	.+30     	; 0x448 <dio_pinval+0xe8>
		}
		case 'D':
		if(val)
 42a:	44 23       	and	r20, r20
 42c:	69 f0       	breq	.+26     	; 0x448 <dio_pinval+0xe8>
		{
			setbit(PORTD,pin);
 42e:	22 b3       	in	r18, 0x12	; 18
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	ac 01       	movw	r20, r24
 436:	02 c0       	rjmp	.+4      	; 0x43c <dio_pinval+0xdc>
 438:	44 0f       	add	r20, r20
 43a:	55 1f       	adc	r21, r21
 43c:	6a 95       	dec	r22
 43e:	e2 f7       	brpl	.-8      	; 0x438 <dio_pinval+0xd8>
 440:	ba 01       	movw	r22, r20
 442:	62 2b       	or	r22, r18
 444:	62 bb       	out	0x12, r22	; 18
 446:	08 95       	ret
		}
		else
		{
			clrbit(PORTD,pin);
 448:	22 b3       	in	r18, 0x12	; 18
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	ac 01       	movw	r20, r24
 450:	02 c0       	rjmp	.+4      	; 0x456 <dio_pinval+0xf6>
 452:	44 0f       	add	r20, r20
 454:	55 1f       	adc	r21, r21
 456:	6a 95       	dec	r22
 458:	e2 f7       	brpl	.-8      	; 0x452 <dio_pinval+0xf2>
 45a:	ba 01       	movw	r22, r20
 45c:	60 95       	com	r22
 45e:	62 23       	and	r22, r18
 460:	62 bb       	out	0x12, r22	; 18
 462:	08 95       	ret

00000464 <dio_readbit>:
}

unsigned char dio_readbit(unsigned char port,unsigned char pin)
{
	unsigned char ret=0;
	switch(port)
 464:	82 34       	cpi	r24, 0x42	; 66
 466:	a1 f0       	breq	.+40     	; 0x490 <dio_readbit+0x2c>
 468:	83 34       	cpi	r24, 0x43	; 67
 46a:	18 f4       	brcc	.+6      	; 0x472 <dio_readbit+0xe>
 46c:	81 34       	cpi	r24, 0x41	; 65
 46e:	71 f5       	brne	.+92     	; 0x4cc <dio_readbit+0x68>
 470:	05 c0       	rjmp	.+10     	; 0x47c <dio_readbit+0x18>
 472:	83 34       	cpi	r24, 0x43	; 67
 474:	b9 f0       	breq	.+46     	; 0x4a4 <dio_readbit+0x40>
 476:	84 34       	cpi	r24, 0x44	; 68
 478:	49 f5       	brne	.+82     	; 0x4cc <dio_readbit+0x68>
 47a:	1e c0       	rjmp	.+60     	; 0x4b8 <dio_readbit+0x54>
	{
		case 'A':
		ret=readbit(PINA,pin);
 47c:	29 b3       	in	r18, 0x19	; 25
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	c9 01       	movw	r24, r18
 482:	02 c0       	rjmp	.+4      	; 0x488 <dio_readbit+0x24>
 484:	95 95       	asr	r25
 486:	87 95       	ror	r24
 488:	6a 95       	dec	r22
 48a:	e2 f7       	brpl	.-8      	; 0x484 <dio_readbit+0x20>
 48c:	81 70       	andi	r24, 0x01	; 1
		break;
 48e:	08 95       	ret
		case 'B':
		ret=readbit(PINB,pin);
 490:	26 b3       	in	r18, 0x16	; 22
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	c9 01       	movw	r24, r18
 496:	02 c0       	rjmp	.+4      	; 0x49c <dio_readbit+0x38>
 498:	95 95       	asr	r25
 49a:	87 95       	ror	r24
 49c:	6a 95       	dec	r22
 49e:	e2 f7       	brpl	.-8      	; 0x498 <dio_readbit+0x34>
 4a0:	81 70       	andi	r24, 0x01	; 1
		break;
 4a2:	08 95       	ret
		case 'C':
		ret=readbit(PINC,pin);
 4a4:	23 b3       	in	r18, 0x13	; 19
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	c9 01       	movw	r24, r18
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <dio_readbit+0x4c>
 4ac:	95 95       	asr	r25
 4ae:	87 95       	ror	r24
 4b0:	6a 95       	dec	r22
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <dio_readbit+0x48>
 4b4:	81 70       	andi	r24, 0x01	; 1
		break;
 4b6:	08 95       	ret
		case 'D':
		ret=readbit(PIND,pin);
 4b8:	20 b3       	in	r18, 0x10	; 16
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	c9 01       	movw	r24, r18
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <dio_readbit+0x60>
 4c0:	95 95       	asr	r25
 4c2:	87 95       	ror	r24
 4c4:	6a 95       	dec	r22
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <dio_readbit+0x5c>
 4c8:	81 70       	andi	r24, 0x01	; 1
		break;
 4ca:	08 95       	ret
	}
}

unsigned char dio_readbit(unsigned char port,unsigned char pin)
{
	unsigned char ret=0;
 4cc:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		break;
	}
	return ret;
}
 4ce:	08 95       	ret

000004d0 <dio_Hnibble_dir>:

void dio_Hnibble_dir(unsigned char port)
{
	switch(port)
 4d0:	82 34       	cpi	r24, 0x42	; 66
 4d2:	71 f0       	breq	.+28     	; 0x4f0 <dio_Hnibble_dir+0x20>
 4d4:	83 34       	cpi	r24, 0x43	; 67
 4d6:	18 f4       	brcc	.+6      	; 0x4de <dio_Hnibble_dir+0xe>
 4d8:	81 34       	cpi	r24, 0x41	; 65
 4da:	a9 f4       	brne	.+42     	; 0x506 <dio_Hnibble_dir+0x36>
 4dc:	05 c0       	rjmp	.+10     	; 0x4e8 <dio_Hnibble_dir+0x18>
 4de:	83 34       	cpi	r24, 0x43	; 67
 4e0:	59 f0       	breq	.+22     	; 0x4f8 <dio_Hnibble_dir+0x28>
 4e2:	84 34       	cpi	r24, 0x44	; 68
 4e4:	81 f4       	brne	.+32     	; 0x506 <dio_Hnibble_dir+0x36>
 4e6:	0c c0       	rjmp	.+24     	; 0x500 <dio_Hnibble_dir+0x30>
	{
		case 'A':
		set_Hnibble(DDRA);
 4e8:	8a b3       	in	r24, 0x1a	; 26
 4ea:	80 6f       	ori	r24, 0xF0	; 240
 4ec:	8a bb       	out	0x1a, r24	; 26
		break;
 4ee:	08 95       	ret
		case 'B':
		set_Hnibble(DDRB);
 4f0:	87 b3       	in	r24, 0x17	; 23
 4f2:	80 6f       	ori	r24, 0xF0	; 240
 4f4:	87 bb       	out	0x17, r24	; 23
		break;
 4f6:	08 95       	ret
		case 'C':
		set_Hnibble(DDRC);
 4f8:	84 b3       	in	r24, 0x14	; 20
 4fa:	80 6f       	ori	r24, 0xF0	; 240
 4fc:	84 bb       	out	0x14, r24	; 20
		break;
 4fe:	08 95       	ret
		case 'D':
		set_Hnibble(DDRD);
 500:	81 b3       	in	r24, 0x11	; 17
 502:	80 6f       	ori	r24, 0xF0	; 240
 504:	81 bb       	out	0x11, r24	; 17
 506:	08 95       	ret

00000508 <dio_Lnibble_dir>:
	}
}

void dio_Lnibble_dir(unsigned char port)
{
	switch(port)
 508:	82 34       	cpi	r24, 0x42	; 66
 50a:	71 f0       	breq	.+28     	; 0x528 <dio_Lnibble_dir+0x20>
 50c:	83 34       	cpi	r24, 0x43	; 67
 50e:	18 f4       	brcc	.+6      	; 0x516 <dio_Lnibble_dir+0xe>
 510:	81 34       	cpi	r24, 0x41	; 65
 512:	a9 f4       	brne	.+42     	; 0x53e <dio_Lnibble_dir+0x36>
 514:	05 c0       	rjmp	.+10     	; 0x520 <dio_Lnibble_dir+0x18>
 516:	83 34       	cpi	r24, 0x43	; 67
 518:	59 f0       	breq	.+22     	; 0x530 <dio_Lnibble_dir+0x28>
 51a:	84 34       	cpi	r24, 0x44	; 68
 51c:	81 f4       	brne	.+32     	; 0x53e <dio_Lnibble_dir+0x36>
 51e:	0c c0       	rjmp	.+24     	; 0x538 <dio_Lnibble_dir+0x30>
	{
		case 'A':
		set_Lnibble(DDRA);
 520:	8a b3       	in	r24, 0x1a	; 26
 522:	8f 60       	ori	r24, 0x0F	; 15
 524:	8a bb       	out	0x1a, r24	; 26
		break;
 526:	08 95       	ret
		case 'B':
		set_Lnibble(DDRB);
 528:	87 b3       	in	r24, 0x17	; 23
 52a:	8f 60       	ori	r24, 0x0F	; 15
 52c:	87 bb       	out	0x17, r24	; 23
		break;
 52e:	08 95       	ret
		case 'C':
		set_Lnibble(DDRC);
 530:	84 b3       	in	r24, 0x14	; 20
 532:	8f 60       	ori	r24, 0x0F	; 15
 534:	84 bb       	out	0x14, r24	; 20
		break;
 536:	08 95       	ret
		case 'D':
		set_Lnibble(DDRD);
 538:	81 b3       	in	r24, 0x11	; 17
 53a:	8f 60       	ori	r24, 0x0F	; 15
 53c:	81 bb       	out	0x11, r24	; 17
 53e:	08 95       	ret

00000540 <dio_Hnibble_val>:
	}
}

void dio_Hnibble_val(unsigned char port,unsigned char value)
{
	switch(port)
 540:	82 34       	cpi	r24, 0x42	; 66
 542:	89 f0       	breq	.+34     	; 0x566 <dio_Hnibble_val+0x26>
 544:	83 34       	cpi	r24, 0x43	; 67
 546:	18 f4       	brcc	.+6      	; 0x54e <dio_Hnibble_val+0xe>
 548:	81 34       	cpi	r24, 0x41	; 65
 54a:	09 f5       	brne	.+66     	; 0x58e <dio_Hnibble_val+0x4e>
 54c:	05 c0       	rjmp	.+10     	; 0x558 <dio_Hnibble_val+0x18>
 54e:	83 34       	cpi	r24, 0x43	; 67
 550:	89 f0       	breq	.+34     	; 0x574 <dio_Hnibble_val+0x34>
 552:	84 34       	cpi	r24, 0x44	; 68
 554:	e1 f4       	brne	.+56     	; 0x58e <dio_Hnibble_val+0x4e>
 556:	15 c0       	rjmp	.+42     	; 0x582 <dio_Hnibble_val+0x42>
	{
		case 'A':
		set_Hnibble_val(PORTA,value);
 558:	8b b3       	in	r24, 0x1b	; 27
 55a:	62 95       	swap	r22
 55c:	60 7f       	andi	r22, 0xF0	; 240
 55e:	8f 70       	andi	r24, 0x0F	; 15
 560:	68 2b       	or	r22, r24
 562:	6b bb       	out	0x1b, r22	; 27
		break;
 564:	08 95       	ret
		case 'B':
		set_Hnibble_val(PORTB,value);
 566:	88 b3       	in	r24, 0x18	; 24
 568:	62 95       	swap	r22
 56a:	60 7f       	andi	r22, 0xF0	; 240
 56c:	8f 70       	andi	r24, 0x0F	; 15
 56e:	68 2b       	or	r22, r24
 570:	68 bb       	out	0x18, r22	; 24
		break;
 572:	08 95       	ret
		case 'C':
		set_Hnibble_val(PORTC,value);
 574:	85 b3       	in	r24, 0x15	; 21
 576:	62 95       	swap	r22
 578:	60 7f       	andi	r22, 0xF0	; 240
 57a:	8f 70       	andi	r24, 0x0F	; 15
 57c:	68 2b       	or	r22, r24
 57e:	65 bb       	out	0x15, r22	; 21
		break;
 580:	08 95       	ret
		case 'D':
		set_Hnibble_val(PORTD,value);
 582:	82 b3       	in	r24, 0x12	; 18
 584:	62 95       	swap	r22
 586:	60 7f       	andi	r22, 0xF0	; 240
 588:	8f 70       	andi	r24, 0x0F	; 15
 58a:	68 2b       	or	r22, r24
 58c:	62 bb       	out	0x12, r22	; 18
 58e:	08 95       	ret

00000590 <dio_Lnibble_val>:
	}	
}

void dio_Lnibble_val(unsigned char port,unsigned char value)
{
	switch(port)
 590:	82 34       	cpi	r24, 0x42	; 66
 592:	81 f0       	breq	.+32     	; 0x5b4 <dio_Lnibble_val+0x24>
 594:	83 34       	cpi	r24, 0x43	; 67
 596:	18 f4       	brcc	.+6      	; 0x59e <dio_Lnibble_val+0xe>
 598:	81 34       	cpi	r24, 0x41	; 65
 59a:	e9 f4       	brne	.+58     	; 0x5d6 <dio_Lnibble_val+0x46>
 59c:	05 c0       	rjmp	.+10     	; 0x5a8 <dio_Lnibble_val+0x18>
 59e:	83 34       	cpi	r24, 0x43	; 67
 5a0:	79 f0       	breq	.+30     	; 0x5c0 <dio_Lnibble_val+0x30>
 5a2:	84 34       	cpi	r24, 0x44	; 68
 5a4:	c1 f4       	brne	.+48     	; 0x5d6 <dio_Lnibble_val+0x46>
 5a6:	12 c0       	rjmp	.+36     	; 0x5cc <dio_Lnibble_val+0x3c>
	{
		case 'A':
		set_Lnibble_val(PORTA,value);
 5a8:	8b b3       	in	r24, 0x1b	; 27
 5aa:	6f 70       	andi	r22, 0x0F	; 15
 5ac:	80 7f       	andi	r24, 0xF0	; 240
 5ae:	68 2b       	or	r22, r24
 5b0:	6b bb       	out	0x1b, r22	; 27
		break;
 5b2:	08 95       	ret
		case 'B':
		set_Lnibble_val(PORTB,value);
 5b4:	88 b3       	in	r24, 0x18	; 24
 5b6:	6f 70       	andi	r22, 0x0F	; 15
 5b8:	80 7f       	andi	r24, 0xF0	; 240
 5ba:	68 2b       	or	r22, r24
 5bc:	68 bb       	out	0x18, r22	; 24
		break;
 5be:	08 95       	ret
		case 'C':
		set_Lnibble_val(PORTC,value);
 5c0:	85 b3       	in	r24, 0x15	; 21
 5c2:	6f 70       	andi	r22, 0x0F	; 15
 5c4:	80 7f       	andi	r24, 0xF0	; 240
 5c6:	68 2b       	or	r22, r24
 5c8:	65 bb       	out	0x15, r22	; 21
		break;
 5ca:	08 95       	ret
		case 'D':
		set_Lnibble_val(PORTD,value);
 5cc:	82 b3       	in	r24, 0x12	; 18
 5ce:	6f 70       	andi	r22, 0x0F	; 15
 5d0:	80 7f       	andi	r24, 0xF0	; 240
 5d2:	68 2b       	or	r22, r24
 5d4:	62 bb       	out	0x12, r22	; 18
 5d6:	08 95       	ret

000005d8 <main>:

#include "BCD_SevenSegments_decoder.h"

int main(void)
{
	test_case();
 5d8:	0e 94 17 01 	call	0x22e	; 0x22e <test_case>
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	08 95       	ret

000005e2 <_exit>:
 5e2:	f8 94       	cli

000005e4 <__stop_program>:
 5e4:	ff cf       	rjmp	.-2      	; 0x5e4 <__stop_program>
