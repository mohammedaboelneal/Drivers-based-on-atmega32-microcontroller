
Increment with each push.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000043a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000043a  000004ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000004b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000c10  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000711  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002db  00000000  00000000  00001401  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004e8  00000000  00000000  000016dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  00001bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000255  00000000  00000000  00001ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000043e  00000000  00000000  00001f39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e3       	ldi	r30, 0x3A	; 58
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c1 01 	call	0x382	; 0x382 <main>
  8a:	0c 94 1b 02 	jmp	0x436	; 0x436 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <dio_setdirection>:
#define F_CPU 8000000UL
#include <util/delay.h>

void dio_setdirection(unsigned char port,unsigned char pin,unsigned char direction)
{
	switch (port)
  92:	82 34       	cpi	r24, 0x42	; 66
  94:	51 f1       	breq	.+84     	; 0xea <dio_setdirection+0x58>
  96:	83 34       	cpi	r24, 0x43	; 67
  98:	20 f4       	brcc	.+8      	; 0xa2 <dio_setdirection+0x10>
  9a:	81 34       	cpi	r24, 0x41	; 65
  9c:	09 f0       	breq	.+2      	; 0xa0 <dio_setdirection+0xe>
  9e:	7b c0       	rjmp	.+246    	; 0x196 <dio_setdirection+0x104>
  a0:	07 c0       	rjmp	.+14     	; 0xb0 <dio_setdirection+0x1e>
  a2:	83 34       	cpi	r24, 0x43	; 67
  a4:	09 f4       	brne	.+2      	; 0xa8 <dio_setdirection+0x16>
  a6:	3e c0       	rjmp	.+124    	; 0x124 <dio_setdirection+0x92>
  a8:	84 34       	cpi	r24, 0x44	; 68
  aa:	09 f0       	breq	.+2      	; 0xae <dio_setdirection+0x1c>
  ac:	74 c0       	rjmp	.+232    	; 0x196 <dio_setdirection+0x104>
  ae:	57 c0       	rjmp	.+174    	; 0x15e <dio_setdirection+0xcc>
	{
		case 'A':
		if(direction)
  b0:	44 23       	and	r20, r20
  b2:	69 f0       	breq	.+26     	; 0xce <dio_setdirection+0x3c>
		{
			setbit(DDRA,pin);
  b4:	2a b3       	in	r18, 0x1a	; 26
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	ac 01       	movw	r20, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <dio_setdirection+0x30>
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <dio_setdirection+0x2c>
  c6:	ba 01       	movw	r22, r20
  c8:	62 2b       	or	r22, r18
  ca:	6a bb       	out	0x1a, r22	; 26
  cc:	08 95       	ret
		}
		else
		{
			clrbit(DDRA,pin);
  ce:	2a b3       	in	r18, 0x1a	; 26
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	ac 01       	movw	r20, r24
  d6:	02 c0       	rjmp	.+4      	; 0xdc <dio_setdirection+0x4a>
  d8:	44 0f       	add	r20, r20
  da:	55 1f       	adc	r21, r21
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <dio_setdirection+0x46>
  e0:	ba 01       	movw	r22, r20
  e2:	60 95       	com	r22
  e4:	62 23       	and	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
		}
		break;
		case 'B':
		if(direction)
  ea:	44 23       	and	r20, r20
  ec:	69 f0       	breq	.+26     	; 0x108 <dio_setdirection+0x76>
		{
			setbit(DDRB,pin);
  ee:	27 b3       	in	r18, 0x17	; 23
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	ac 01       	movw	r20, r24
  f6:	02 c0       	rjmp	.+4      	; 0xfc <dio_setdirection+0x6a>
  f8:	44 0f       	add	r20, r20
  fa:	55 1f       	adc	r21, r21
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <dio_setdirection+0x66>
 100:	ba 01       	movw	r22, r20
 102:	62 2b       	or	r22, r18
 104:	67 bb       	out	0x17, r22	; 23
 106:	08 95       	ret
		}
		else
		{
			clrbit(DDRB,pin);
 108:	27 b3       	in	r18, 0x17	; 23
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	ac 01       	movw	r20, r24
 110:	02 c0       	rjmp	.+4      	; 0x116 <dio_setdirection+0x84>
 112:	44 0f       	add	r20, r20
 114:	55 1f       	adc	r21, r21
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <dio_setdirection+0x80>
 11a:	ba 01       	movw	r22, r20
 11c:	60 95       	com	r22
 11e:	62 23       	and	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret
		}
		break;
		case 'C':
		if(direction)
 124:	44 23       	and	r20, r20
 126:	69 f0       	breq	.+26     	; 0x142 <dio_setdirection+0xb0>
		{
			setbit(DDRC,pin);
 128:	24 b3       	in	r18, 0x14	; 20
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	ac 01       	movw	r20, r24
 130:	02 c0       	rjmp	.+4      	; 0x136 <dio_setdirection+0xa4>
 132:	44 0f       	add	r20, r20
 134:	55 1f       	adc	r21, r21
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <dio_setdirection+0xa0>
 13a:	ba 01       	movw	r22, r20
 13c:	62 2b       	or	r22, r18
 13e:	64 bb       	out	0x14, r22	; 20
 140:	08 95       	ret
		}
		else
		{
			clrbit(DDRC,pin);
 142:	24 b3       	in	r18, 0x14	; 20
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	ac 01       	movw	r20, r24
 14a:	02 c0       	rjmp	.+4      	; 0x150 <dio_setdirection+0xbe>
 14c:	44 0f       	add	r20, r20
 14e:	55 1f       	adc	r21, r21
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <dio_setdirection+0xba>
 154:	ba 01       	movw	r22, r20
 156:	60 95       	com	r22
 158:	62 23       	and	r22, r18
 15a:	64 bb       	out	0x14, r22	; 20
 15c:	08 95       	ret
		}
		break;
		case 'D':
		if(direction)
 15e:	44 23       	and	r20, r20
 160:	69 f0       	breq	.+26     	; 0x17c <dio_setdirection+0xea>
		{
			setbit(DDRD,pin);
 162:	21 b3       	in	r18, 0x11	; 17
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	ac 01       	movw	r20, r24
 16a:	02 c0       	rjmp	.+4      	; 0x170 <dio_setdirection+0xde>
 16c:	44 0f       	add	r20, r20
 16e:	55 1f       	adc	r21, r21
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <dio_setdirection+0xda>
 174:	ba 01       	movw	r22, r20
 176:	62 2b       	or	r22, r18
 178:	61 bb       	out	0x11, r22	; 17
 17a:	08 95       	ret
		}
		else
		{
			clrbit(DDRD,pin);
 17c:	21 b3       	in	r18, 0x11	; 17
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	ac 01       	movw	r20, r24
 184:	02 c0       	rjmp	.+4      	; 0x18a <dio_setdirection+0xf8>
 186:	44 0f       	add	r20, r20
 188:	55 1f       	adc	r21, r21
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <dio_setdirection+0xf4>
 18e:	ba 01       	movw	r22, r20
 190:	60 95       	com	r22
 192:	62 23       	and	r22, r18
 194:	61 bb       	out	0x11, r22	; 17
 196:	08 95       	ret

00000198 <dio_port_dir>:
	}
}

void dio_port_dir(unsigned char port,unsigned char dir)
{
	switch(port)
 198:	82 34       	cpi	r24, 0x42	; 66
 19a:	89 f0       	breq	.+34     	; 0x1be <dio_port_dir+0x26>
 19c:	83 34       	cpi	r24, 0x43	; 67
 19e:	18 f4       	brcc	.+6      	; 0x1a6 <dio_port_dir+0xe>
 1a0:	81 34       	cpi	r24, 0x41	; 65
 1a2:	09 f5       	brne	.+66     	; 0x1e6 <dio_port_dir+0x4e>
 1a4:	05 c0       	rjmp	.+10     	; 0x1b0 <dio_port_dir+0x18>
 1a6:	83 34       	cpi	r24, 0x43	; 67
 1a8:	89 f0       	breq	.+34     	; 0x1cc <dio_port_dir+0x34>
 1aa:	84 34       	cpi	r24, 0x44	; 68
 1ac:	e1 f4       	brne	.+56     	; 0x1e6 <dio_port_dir+0x4e>
 1ae:	15 c0       	rjmp	.+42     	; 0x1da <dio_port_dir+0x42>
	{
		case 'A':
		if(dir)
 1b0:	66 23       	and	r22, r22
 1b2:	19 f0       	breq	.+6      	; 0x1ba <dio_port_dir+0x22>
		{
			set_port(DDRA);
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	8a bb       	out	0x1a, r24	; 26
 1b8:	08 95       	ret
		}
		else
		{
			clr_port(DDRA);
 1ba:	1a ba       	out	0x1a, r1	; 26
 1bc:	08 95       	ret
		}
		break;
		case 'B':
		if(dir)
 1be:	66 23       	and	r22, r22
 1c0:	19 f0       	breq	.+6      	; 0x1c8 <dio_port_dir+0x30>
		{
			set_port(DDRB);
 1c2:	8f ef       	ldi	r24, 0xFF	; 255
 1c4:	87 bb       	out	0x17, r24	; 23
 1c6:	08 95       	ret
		}
		else
		{
			clr_port(DDRB);
 1c8:	17 ba       	out	0x17, r1	; 23
 1ca:	08 95       	ret
		}
		break;
		case 'C':
		if(dir)
 1cc:	66 23       	and	r22, r22
 1ce:	19 f0       	breq	.+6      	; 0x1d6 <dio_port_dir+0x3e>
		{
			set_port(DDRC);
 1d0:	8f ef       	ldi	r24, 0xFF	; 255
 1d2:	84 bb       	out	0x14, r24	; 20
 1d4:	08 95       	ret
		}
		else
		{
			clr_port(DDRC);
 1d6:	14 ba       	out	0x14, r1	; 20
 1d8:	08 95       	ret
		}
		break;
		case 'D':
		if(dir)
 1da:	66 23       	and	r22, r22
 1dc:	19 f0       	breq	.+6      	; 0x1e4 <dio_port_dir+0x4c>
		{
			set_port(DDRD);
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	81 bb       	out	0x11, r24	; 17
 1e2:	08 95       	ret
		}
		else
		{
			clr_port(DDRD);
 1e4:	11 ba       	out	0x11, r1	; 17
 1e6:	08 95       	ret

000001e8 <dio_pinwrite>:
	}
}

void dio_pinwrite(unsigned char port,unsigned char pin,unsigned char value)
{
	switch (port)
 1e8:	82 34       	cpi	r24, 0x42	; 66
 1ea:	51 f1       	breq	.+84     	; 0x240 <dio_pinwrite+0x58>
 1ec:	83 34       	cpi	r24, 0x43	; 67
 1ee:	20 f4       	brcc	.+8      	; 0x1f8 <dio_pinwrite+0x10>
 1f0:	81 34       	cpi	r24, 0x41	; 65
 1f2:	09 f0       	breq	.+2      	; 0x1f6 <dio_pinwrite+0xe>
 1f4:	7b c0       	rjmp	.+246    	; 0x2ec <dio_pinwrite+0x104>
 1f6:	07 c0       	rjmp	.+14     	; 0x206 <dio_pinwrite+0x1e>
 1f8:	83 34       	cpi	r24, 0x43	; 67
 1fa:	09 f4       	brne	.+2      	; 0x1fe <dio_pinwrite+0x16>
 1fc:	3e c0       	rjmp	.+124    	; 0x27a <dio_pinwrite+0x92>
 1fe:	84 34       	cpi	r24, 0x44	; 68
 200:	09 f0       	breq	.+2      	; 0x204 <dio_pinwrite+0x1c>
 202:	74 c0       	rjmp	.+232    	; 0x2ec <dio_pinwrite+0x104>
 204:	57 c0       	rjmp	.+174    	; 0x2b4 <dio_pinwrite+0xcc>
	{
		case 'A':
		if(value)
 206:	44 23       	and	r20, r20
 208:	69 f0       	breq	.+26     	; 0x224 <dio_pinwrite+0x3c>
		{
			setbit(PORTA,pin);
 20a:	2b b3       	in	r18, 0x1b	; 27
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	ac 01       	movw	r20, r24
 212:	02 c0       	rjmp	.+4      	; 0x218 <dio_pinwrite+0x30>
 214:	44 0f       	add	r20, r20
 216:	55 1f       	adc	r21, r21
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <dio_pinwrite+0x2c>
 21c:	ba 01       	movw	r22, r20
 21e:	62 2b       	or	r22, r18
 220:	6b bb       	out	0x1b, r22	; 27
 222:	08 95       	ret
		}
		else
		{
			clrbit(PORTA,pin);
 224:	2b b3       	in	r18, 0x1b	; 27
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	ac 01       	movw	r20, r24
 22c:	02 c0       	rjmp	.+4      	; 0x232 <dio_pinwrite+0x4a>
 22e:	44 0f       	add	r20, r20
 230:	55 1f       	adc	r21, r21
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <dio_pinwrite+0x46>
 236:	ba 01       	movw	r22, r20
 238:	60 95       	com	r22
 23a:	62 23       	and	r22, r18
 23c:	6b bb       	out	0x1b, r22	; 27
 23e:	08 95       	ret
		}
		break;
		case 'B':
		if(value)
 240:	44 23       	and	r20, r20
 242:	69 f0       	breq	.+26     	; 0x25e <dio_pinwrite+0x76>
		{
			setbit(PORTB,pin);
 244:	28 b3       	in	r18, 0x18	; 24
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	ac 01       	movw	r20, r24
 24c:	02 c0       	rjmp	.+4      	; 0x252 <dio_pinwrite+0x6a>
 24e:	44 0f       	add	r20, r20
 250:	55 1f       	adc	r21, r21
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <dio_pinwrite+0x66>
 256:	ba 01       	movw	r22, r20
 258:	62 2b       	or	r22, r18
 25a:	68 bb       	out	0x18, r22	; 24
 25c:	08 95       	ret
		}
		else
		{
			clrbit(PORTB,pin);
 25e:	28 b3       	in	r18, 0x18	; 24
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	ac 01       	movw	r20, r24
 266:	02 c0       	rjmp	.+4      	; 0x26c <dio_pinwrite+0x84>
 268:	44 0f       	add	r20, r20
 26a:	55 1f       	adc	r21, r21
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <dio_pinwrite+0x80>
 270:	ba 01       	movw	r22, r20
 272:	60 95       	com	r22
 274:	62 23       	and	r22, r18
 276:	68 bb       	out	0x18, r22	; 24
 278:	08 95       	ret
		}
		break;
		case 'C':
		if(value)
 27a:	44 23       	and	r20, r20
 27c:	69 f0       	breq	.+26     	; 0x298 <dio_pinwrite+0xb0>
		{
			setbit(PORTC,pin);
 27e:	25 b3       	in	r18, 0x15	; 21
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	ac 01       	movw	r20, r24
 286:	02 c0       	rjmp	.+4      	; 0x28c <dio_pinwrite+0xa4>
 288:	44 0f       	add	r20, r20
 28a:	55 1f       	adc	r21, r21
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <dio_pinwrite+0xa0>
 290:	ba 01       	movw	r22, r20
 292:	62 2b       	or	r22, r18
 294:	65 bb       	out	0x15, r22	; 21
 296:	08 95       	ret
		}
		else
		{
			clrbit(PORTC,pin);
 298:	25 b3       	in	r18, 0x15	; 21
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	ac 01       	movw	r20, r24
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <dio_pinwrite+0xbe>
 2a2:	44 0f       	add	r20, r20
 2a4:	55 1f       	adc	r21, r21
 2a6:	6a 95       	dec	r22
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <dio_pinwrite+0xba>
 2aa:	ba 01       	movw	r22, r20
 2ac:	60 95       	com	r22
 2ae:	62 23       	and	r22, r18
 2b0:	65 bb       	out	0x15, r22	; 21
 2b2:	08 95       	ret
		}
		break;
		case 'D':
		if(value)
 2b4:	44 23       	and	r20, r20
 2b6:	69 f0       	breq	.+26     	; 0x2d2 <dio_pinwrite+0xea>
		{
			setbit(PORTD,pin);
 2b8:	22 b3       	in	r18, 0x12	; 18
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	ac 01       	movw	r20, r24
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <dio_pinwrite+0xde>
 2c2:	44 0f       	add	r20, r20
 2c4:	55 1f       	adc	r21, r21
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <dio_pinwrite+0xda>
 2ca:	ba 01       	movw	r22, r20
 2cc:	62 2b       	or	r22, r18
 2ce:	62 bb       	out	0x12, r22	; 18
 2d0:	08 95       	ret
		}
		else
		{
			clrbit(PORTD,pin);
 2d2:	22 b3       	in	r18, 0x12	; 18
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	ac 01       	movw	r20, r24
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <dio_pinwrite+0xf8>
 2dc:	44 0f       	add	r20, r20
 2de:	55 1f       	adc	r21, r21
 2e0:	6a 95       	dec	r22
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <dio_pinwrite+0xf4>
 2e4:	ba 01       	movw	r22, r20
 2e6:	60 95       	com	r22
 2e8:	62 23       	and	r22, r18
 2ea:	62 bb       	out	0x12, r22	; 18
 2ec:	08 95       	ret

000002ee <dio_portwrite>:
	}
}

void dio_portwrite(unsigned char port,unsigned char value)
{
	switch(port)
 2ee:	82 34       	cpi	r24, 0x42	; 66
 2f0:	61 f0       	breq	.+24     	; 0x30a <dio_portwrite+0x1c>
 2f2:	83 34       	cpi	r24, 0x43	; 67
 2f4:	18 f4       	brcc	.+6      	; 0x2fc <dio_portwrite+0xe>
 2f6:	81 34       	cpi	r24, 0x41	; 65
 2f8:	69 f4       	brne	.+26     	; 0x314 <dio_portwrite+0x26>
 2fa:	05 c0       	rjmp	.+10     	; 0x306 <dio_portwrite+0x18>
 2fc:	83 34       	cpi	r24, 0x43	; 67
 2fe:	39 f0       	breq	.+14     	; 0x30e <dio_portwrite+0x20>
 300:	84 34       	cpi	r24, 0x44	; 68
 302:	41 f4       	brne	.+16     	; 0x314 <dio_portwrite+0x26>
 304:	06 c0       	rjmp	.+12     	; 0x312 <dio_portwrite+0x24>
	{
		case 'A':
		PORTA=value;
 306:	6b bb       	out	0x1b, r22	; 27
		break;
 308:	08 95       	ret
		case 'B':
		PORTB=value;
 30a:	68 bb       	out	0x18, r22	; 24
		break;
 30c:	08 95       	ret
		case 'C':
		PORTC=value;
 30e:	65 bb       	out	0x15, r22	; 21
		break;
 310:	08 95       	ret
		case 'D':
		PORTD=value;
 312:	62 bb       	out	0x12, r22	; 18
 314:	08 95       	ret

00000316 <dio_pinread>:
}

unsigned char dio_pinread(unsigned char port,unsigned char pin)
{
	unsigned char returned_value=0;
	switch(port)
 316:	82 34       	cpi	r24, 0x42	; 66
 318:	a1 f0       	breq	.+40     	; 0x342 <dio_pinread+0x2c>
 31a:	83 34       	cpi	r24, 0x43	; 67
 31c:	18 f4       	brcc	.+6      	; 0x324 <dio_pinread+0xe>
 31e:	81 34       	cpi	r24, 0x41	; 65
 320:	71 f5       	brne	.+92     	; 0x37e <dio_pinread+0x68>
 322:	05 c0       	rjmp	.+10     	; 0x32e <dio_pinread+0x18>
 324:	83 34       	cpi	r24, 0x43	; 67
 326:	b9 f0       	breq	.+46     	; 0x356 <dio_pinread+0x40>
 328:	84 34       	cpi	r24, 0x44	; 68
 32a:	49 f5       	brne	.+82     	; 0x37e <dio_pinread+0x68>
 32c:	1e c0       	rjmp	.+60     	; 0x36a <dio_pinread+0x54>
	{
		case 'A':
		returned_value=readbit(PINA,pin);
 32e:	29 b3       	in	r18, 0x19	; 25
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	c9 01       	movw	r24, r18
 334:	02 c0       	rjmp	.+4      	; 0x33a <dio_pinread+0x24>
 336:	95 95       	asr	r25
 338:	87 95       	ror	r24
 33a:	6a 95       	dec	r22
 33c:	e2 f7       	brpl	.-8      	; 0x336 <dio_pinread+0x20>
 33e:	81 70       	andi	r24, 0x01	; 1
		break;
 340:	08 95       	ret
		case 'B':
		returned_value=readbit(PINB,pin);
 342:	26 b3       	in	r18, 0x16	; 22
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	c9 01       	movw	r24, r18
 348:	02 c0       	rjmp	.+4      	; 0x34e <dio_pinread+0x38>
 34a:	95 95       	asr	r25
 34c:	87 95       	ror	r24
 34e:	6a 95       	dec	r22
 350:	e2 f7       	brpl	.-8      	; 0x34a <dio_pinread+0x34>
 352:	81 70       	andi	r24, 0x01	; 1
		break;
 354:	08 95       	ret
		case 'C':
		returned_value=readbit(PINC,pin);
 356:	23 b3       	in	r18, 0x13	; 19
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	c9 01       	movw	r24, r18
 35c:	02 c0       	rjmp	.+4      	; 0x362 <dio_pinread+0x4c>
 35e:	95 95       	asr	r25
 360:	87 95       	ror	r24
 362:	6a 95       	dec	r22
 364:	e2 f7       	brpl	.-8      	; 0x35e <dio_pinread+0x48>
 366:	81 70       	andi	r24, 0x01	; 1
		break;
 368:	08 95       	ret
		case 'D':
		returned_value=readbit(PIND,pin);
 36a:	20 b3       	in	r18, 0x10	; 16
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	c9 01       	movw	r24, r18
 370:	02 c0       	rjmp	.+4      	; 0x376 <dio_pinread+0x60>
 372:	95 95       	asr	r25
 374:	87 95       	ror	r24
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <dio_pinread+0x5c>
 37a:	81 70       	andi	r24, 0x01	; 1
		break;
 37c:	08 95       	ret
	}
}

unsigned char dio_pinread(unsigned char port,unsigned char pin)
{
	unsigned char returned_value=0;
 37e:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		break;
	}
	return returned_value;
}
 380:	08 95       	ret

00000382 <main>:

#include "seven_segment.h"

int main(void)
{
    test();
 382:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <test>
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	08 95       	ret

0000038c <seg_portdirection>:
#define CA	//common anode
//#define CC	//common cathode 

void seg_portdirection(unsigned char port)
{
	dio_port_dir(port,1);
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	0e 94 cc 00 	call	0x198	; 0x198 <dio_port_dir>
}
 392:	08 95       	ret

00000394 <seg_write_on_port>:

void seg_write_on_port(unsigned char port,unsigned char num_pattern)
{
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	cd b7       	in	r28, 0x3d	; 61
 39a:	de b7       	in	r29, 0x3e	; 62
 39c:	2a 97       	sbiw	r28, 0x0a	; 10
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	f8 94       	cli
 3a2:	de bf       	out	0x3e, r29	; 62
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	cd bf       	out	0x3d, r28	; 61
	#ifdef CA
	unsigned char arr[]={~0x3f,~0x06,~0x5b,~0x4f,~0x66,~0x6d,~0x7d,~0x47,~0x7f,~0x6f};
 3a8:	de 01       	movw	r26, r28
 3aa:	11 96       	adiw	r26, 0x01	; 1
 3ac:	e0 e6       	ldi	r30, 0x60	; 96
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	9a e0       	ldi	r25, 0x0A	; 10
 3b2:	01 90       	ld	r0, Z+
 3b4:	0d 92       	st	X+, r0
 3b6:	91 50       	subi	r25, 0x01	; 1
 3b8:	e1 f7       	brne	.-8      	; 0x3b2 <seg_write_on_port+0x1e>
	#elif defined CC
	unsigned char arr[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x47,0x7f,0x6f};
	#endif
	dio_portwrite(port,arr[num_pattern]);
 3ba:	fe 01       	movw	r30, r28
 3bc:	e6 0f       	add	r30, r22
 3be:	f1 1d       	adc	r31, r1
 3c0:	61 81       	ldd	r22, Z+1	; 0x01
 3c2:	0e 94 77 01 	call	0x2ee	; 0x2ee <dio_portwrite>
}
 3c6:	2a 96       	adiw	r28, 0x0a	; 10
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	f8 94       	cli
 3cc:	de bf       	out	0x3e, r29	; 62
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	cd bf       	out	0x3d, r28	; 61
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28
 3d6:	08 95       	ret

000003d8 <test>:



void test(void)
{
	seg_portdirection('A');
 3d8:	81 e4       	ldi	r24, 0x41	; 65
 3da:	0e 94 c6 01 	call	0x38c	; 0x38c <seg_portdirection>
	switch_init('D',0);
 3de:	84 e4       	ldi	r24, 0x44	; 68
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	0e 94 10 02 	call	0x420	; 0x420 <switch_init>
	switch_en_internalPullup('D',0);
 3e6:	84 e4       	ldi	r24, 0x44	; 68
 3e8:	60 e0       	ldi	r22, 0x00	; 0
 3ea:	0e 94 14 02 	call	0x428	; 0x428 <switch_en_internalPullup>
	unsigned char counter=0;
 3ee:	c0 e0       	ldi	r28, 0x00	; 0
	while(1)
	{
		seg_write_on_port('A',counter);
 3f0:	81 e4       	ldi	r24, 0x41	; 65
 3f2:	6c 2f       	mov	r22, r28
 3f4:	0e 94 ca 01 	call	0x394	; 0x394 <seg_write_on_port>
		if ((switch_status('D',0))==0)
 3f8:	84 e4       	ldi	r24, 0x44	; 68
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	0e 94 18 02 	call	0x430	; 0x430 <switch_status>
 400:	88 23       	and	r24, r24
 402:	09 f4       	brne	.+2      	; 0x406 <test+0x2e>
		{
			counter++;
 404:	cf 5f       	subi	r28, 0xFF	; 255
		}
		if (counter>9)
 406:	ca 30       	cpi	r28, 0x0A	; 10
 408:	08 f0       	brcs	.+2      	; 0x40c <test+0x34>
		{
			counter=0;
 40a:	c0 e0       	ldi	r28, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 40c:	8f ed       	ldi	r24, 0xDF	; 223
 40e:	93 e9       	ldi	r25, 0x93	; 147
 410:	a4 e0       	ldi	r26, 0x04	; 4
 412:	81 50       	subi	r24, 0x01	; 1
 414:	90 40       	sbci	r25, 0x00	; 0
 416:	a0 40       	sbci	r26, 0x00	; 0
 418:	e1 f7       	brne	.-8      	; 0x412 <test+0x3a>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <test+0x44>
 41c:	00 00       	nop
 41e:	e8 cf       	rjmp	.-48     	; 0x3f0 <test+0x18>

00000420 <switch_init>:
#include "DIO.h"
#include "Switch.h"

void switch_init(unsigned char port,unsigned char pin)
{
	dio_setdirection(port,pin,0);
 420:	40 e0       	ldi	r20, 0x00	; 0
 422:	0e 94 49 00 	call	0x92	; 0x92 <dio_setdirection>
}
 426:	08 95       	ret

00000428 <switch_en_internalPullup>:

void switch_en_internalPullup(unsigned char port,unsigned char pin)
{
	dio_pinwrite(port,pin,1);
 428:	41 e0       	ldi	r20, 0x01	; 1
 42a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <dio_pinwrite>
}
 42e:	08 95       	ret

00000430 <switch_status>:

unsigned char switch_status(unsigned char port,unsigned char pin)
{
	return dio_pinread(port,pin);
 430:	0e 94 8b 01 	call	0x316	; 0x316 <dio_pinread>
 434:	08 95       	ret

00000436 <_exit>:
 436:	f8 94       	cli

00000438 <__stop_program>:
 438:	ff cf       	rjmp	.-2      	; 0x438 <__stop_program>
