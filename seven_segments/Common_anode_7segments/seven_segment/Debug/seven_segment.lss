
seven_segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000004ee  00000562  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000056c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00000cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d9  00000000  00000000  00000d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000289  00000000  00000000  00001459  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004bc  00000000  00000000  000016e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  00001ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000237  00000000  00000000  00001cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000522  00000000  00000000  00001ee3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 33 02 	call	0x466	; 0x466 <main>
  8a:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <dio_setpindirection>:
#include<avr/io.h>
#include "DIO.h"
#include "macros.h"
void dio_setpindirection(unsigned char port,unsigned char pin,unsigned char direction)
{
	switch(port)
  92:	82 34       	cpi	r24, 0x42	; 66
  94:	51 f1       	breq	.+84     	; 0xea <dio_setpindirection+0x58>
  96:	83 34       	cpi	r24, 0x43	; 67
  98:	20 f4       	brcc	.+8      	; 0xa2 <dio_setpindirection+0x10>
  9a:	81 34       	cpi	r24, 0x41	; 65
  9c:	09 f0       	breq	.+2      	; 0xa0 <dio_setpindirection+0xe>
  9e:	7b c0       	rjmp	.+246    	; 0x196 <dio_setpindirection+0x104>
  a0:	07 c0       	rjmp	.+14     	; 0xb0 <dio_setpindirection+0x1e>
  a2:	83 34       	cpi	r24, 0x43	; 67
  a4:	09 f4       	brne	.+2      	; 0xa8 <dio_setpindirection+0x16>
  a6:	3e c0       	rjmp	.+124    	; 0x124 <dio_setpindirection+0x92>
  a8:	84 34       	cpi	r24, 0x44	; 68
  aa:	09 f0       	breq	.+2      	; 0xae <dio_setpindirection+0x1c>
  ac:	74 c0       	rjmp	.+232    	; 0x196 <dio_setpindirection+0x104>
  ae:	57 c0       	rjmp	.+174    	; 0x15e <dio_setpindirection+0xcc>
	{
		case 'A':
		if (direction)
  b0:	44 23       	and	r20, r20
  b2:	69 f0       	breq	.+26     	; 0xce <dio_setpindirection+0x3c>
		{
			setbit(DDRA,pin);
  b4:	2a b3       	in	r18, 0x1a	; 26
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	ac 01       	movw	r20, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <dio_setpindirection+0x30>
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <dio_setpindirection+0x2c>
  c6:	ba 01       	movw	r22, r20
  c8:	62 2b       	or	r22, r18
  ca:	6a bb       	out	0x1a, r22	; 26
  cc:	08 95       	ret
		}
		else
		{
			clearbit(DDRA,pin);
  ce:	2a b3       	in	r18, 0x1a	; 26
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	ac 01       	movw	r20, r24
  d6:	02 c0       	rjmp	.+4      	; 0xdc <dio_setpindirection+0x4a>
  d8:	44 0f       	add	r20, r20
  da:	55 1f       	adc	r21, r21
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <dio_setpindirection+0x46>
  e0:	ba 01       	movw	r22, r20
  e2:	60 95       	com	r22
  e4:	62 23       	and	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
		}
		break;
		case 'B':
		if (direction)
  ea:	44 23       	and	r20, r20
  ec:	69 f0       	breq	.+26     	; 0x108 <dio_setpindirection+0x76>
		{
			setbit(DDRB,pin);
  ee:	27 b3       	in	r18, 0x17	; 23
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	ac 01       	movw	r20, r24
  f6:	02 c0       	rjmp	.+4      	; 0xfc <dio_setpindirection+0x6a>
  f8:	44 0f       	add	r20, r20
  fa:	55 1f       	adc	r21, r21
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <dio_setpindirection+0x66>
 100:	ba 01       	movw	r22, r20
 102:	62 2b       	or	r22, r18
 104:	67 bb       	out	0x17, r22	; 23
 106:	08 95       	ret
		}
		else
		{
			clearbit(DDRB,pin);
 108:	27 b3       	in	r18, 0x17	; 23
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	ac 01       	movw	r20, r24
 110:	02 c0       	rjmp	.+4      	; 0x116 <dio_setpindirection+0x84>
 112:	44 0f       	add	r20, r20
 114:	55 1f       	adc	r21, r21
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <dio_setpindirection+0x80>
 11a:	ba 01       	movw	r22, r20
 11c:	60 95       	com	r22
 11e:	62 23       	and	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret
		}
		break;
		case 'C':
		if (direction)
 124:	44 23       	and	r20, r20
 126:	69 f0       	breq	.+26     	; 0x142 <dio_setpindirection+0xb0>
		{
			setbit(DDRC,pin);
 128:	24 b3       	in	r18, 0x14	; 20
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	ac 01       	movw	r20, r24
 130:	02 c0       	rjmp	.+4      	; 0x136 <dio_setpindirection+0xa4>
 132:	44 0f       	add	r20, r20
 134:	55 1f       	adc	r21, r21
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <dio_setpindirection+0xa0>
 13a:	ba 01       	movw	r22, r20
 13c:	62 2b       	or	r22, r18
 13e:	64 bb       	out	0x14, r22	; 20
 140:	08 95       	ret
		}
		else
		{
			clearbit(DDRC,pin);
 142:	24 b3       	in	r18, 0x14	; 20
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	ac 01       	movw	r20, r24
 14a:	02 c0       	rjmp	.+4      	; 0x150 <dio_setpindirection+0xbe>
 14c:	44 0f       	add	r20, r20
 14e:	55 1f       	adc	r21, r21
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <dio_setpindirection+0xba>
 154:	ba 01       	movw	r22, r20
 156:	60 95       	com	r22
 158:	62 23       	and	r22, r18
 15a:	64 bb       	out	0x14, r22	; 20
 15c:	08 95       	ret
		}
		break;
		case 'D':
		if (direction)
 15e:	44 23       	and	r20, r20
 160:	69 f0       	breq	.+26     	; 0x17c <dio_setpindirection+0xea>
		{
			setbit(DDRD,pin);
 162:	21 b3       	in	r18, 0x11	; 17
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	ac 01       	movw	r20, r24
 16a:	02 c0       	rjmp	.+4      	; 0x170 <dio_setpindirection+0xde>
 16c:	44 0f       	add	r20, r20
 16e:	55 1f       	adc	r21, r21
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <dio_setpindirection+0xda>
 174:	ba 01       	movw	r22, r20
 176:	62 2b       	or	r22, r18
 178:	61 bb       	out	0x11, r22	; 17
 17a:	08 95       	ret
		}
		else
		{
			clearbit(DDRD,pin);
 17c:	21 b3       	in	r18, 0x11	; 17
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	ac 01       	movw	r20, r24
 184:	02 c0       	rjmp	.+4      	; 0x18a <dio_setpindirection+0xf8>
 186:	44 0f       	add	r20, r20
 188:	55 1f       	adc	r21, r21
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <dio_setpindirection+0xf4>
 18e:	ba 01       	movw	r22, r20
 190:	60 95       	com	r22
 192:	62 23       	and	r22, r18
 194:	61 bb       	out	0x11, r22	; 17
 196:	08 95       	ret

00000198 <dio_setportdirection>:
		break;
	}
}
void dio_setportdirection(unsigned char port,unsigned char direction)
{
	switch (port)
 198:	82 34       	cpi	r24, 0x42	; 66
 19a:	89 f0       	breq	.+34     	; 0x1be <dio_setportdirection+0x26>
 19c:	83 34       	cpi	r24, 0x43	; 67
 19e:	18 f4       	brcc	.+6      	; 0x1a6 <dio_setportdirection+0xe>
 1a0:	81 34       	cpi	r24, 0x41	; 65
 1a2:	09 f5       	brne	.+66     	; 0x1e6 <dio_setportdirection+0x4e>
 1a4:	05 c0       	rjmp	.+10     	; 0x1b0 <dio_setportdirection+0x18>
 1a6:	83 34       	cpi	r24, 0x43	; 67
 1a8:	89 f0       	breq	.+34     	; 0x1cc <dio_setportdirection+0x34>
 1aa:	84 34       	cpi	r24, 0x44	; 68
 1ac:	e1 f4       	brne	.+56     	; 0x1e6 <dio_setportdirection+0x4e>
 1ae:	15 c0       	rjmp	.+42     	; 0x1da <dio_setportdirection+0x42>
	{
		case 'A':
		if (direction)
 1b0:	66 23       	and	r22, r22
 1b2:	19 f0       	breq	.+6      	; 0x1ba <dio_setportdirection+0x22>
		{
			setport(DDRA);
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	8a bb       	out	0x1a, r24	; 26
 1b8:	08 95       	ret
		}
		else
		{
			clearport(DDRA);
 1ba:	1a ba       	out	0x1a, r1	; 26
 1bc:	08 95       	ret
		}
		break;
		case 'B':
		if (direction)
 1be:	66 23       	and	r22, r22
 1c0:	19 f0       	breq	.+6      	; 0x1c8 <dio_setportdirection+0x30>
		{
			setport(DDRB);
 1c2:	8f ef       	ldi	r24, 0xFF	; 255
 1c4:	87 bb       	out	0x17, r24	; 23
 1c6:	08 95       	ret
		}
		else
		{
			clearport(DDRB);
 1c8:	17 ba       	out	0x17, r1	; 23
 1ca:	08 95       	ret
		}
		break;
		case 'C':
		if (direction)
 1cc:	66 23       	and	r22, r22
 1ce:	19 f0       	breq	.+6      	; 0x1d6 <dio_setportdirection+0x3e>
		{
			setport(DDRC);
 1d0:	8f ef       	ldi	r24, 0xFF	; 255
 1d2:	84 bb       	out	0x14, r24	; 20
 1d4:	08 95       	ret
		}
		else
		{
			clearport(DDRC);
 1d6:	14 ba       	out	0x14, r1	; 20
 1d8:	08 95       	ret
		}
		break;
		case 'D':
		if (direction)
 1da:	66 23       	and	r22, r22
 1dc:	19 f0       	breq	.+6      	; 0x1e4 <dio_setportdirection+0x4c>
		{
			setport(DDRD);
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	81 bb       	out	0x11, r24	; 17
 1e2:	08 95       	ret
		}
		else
		{
			clearport(DDRD);
 1e4:	11 ba       	out	0x11, r1	; 17
 1e6:	08 95       	ret

000001e8 <dio_pinwrite>:
		break;
	}
}
void dio_pinwrite(unsigned char port,unsigned char pin,unsigned char value)
{
	switch(port)
 1e8:	82 34       	cpi	r24, 0x42	; 66
 1ea:	51 f1       	breq	.+84     	; 0x240 <dio_pinwrite+0x58>
 1ec:	83 34       	cpi	r24, 0x43	; 67
 1ee:	20 f4       	brcc	.+8      	; 0x1f8 <dio_pinwrite+0x10>
 1f0:	81 34       	cpi	r24, 0x41	; 65
 1f2:	09 f0       	breq	.+2      	; 0x1f6 <dio_pinwrite+0xe>
 1f4:	7b c0       	rjmp	.+246    	; 0x2ec <dio_pinwrite+0x104>
 1f6:	07 c0       	rjmp	.+14     	; 0x206 <dio_pinwrite+0x1e>
 1f8:	83 34       	cpi	r24, 0x43	; 67
 1fa:	09 f4       	brne	.+2      	; 0x1fe <dio_pinwrite+0x16>
 1fc:	3e c0       	rjmp	.+124    	; 0x27a <dio_pinwrite+0x92>
 1fe:	84 34       	cpi	r24, 0x44	; 68
 200:	09 f0       	breq	.+2      	; 0x204 <dio_pinwrite+0x1c>
 202:	74 c0       	rjmp	.+232    	; 0x2ec <dio_pinwrite+0x104>
 204:	57 c0       	rjmp	.+174    	; 0x2b4 <dio_pinwrite+0xcc>
	{
		case 'A':
		if (value)
 206:	44 23       	and	r20, r20
 208:	69 f0       	breq	.+26     	; 0x224 <dio_pinwrite+0x3c>
		{
			setbit(PORTA,pin);
 20a:	2b b3       	in	r18, 0x1b	; 27
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	ac 01       	movw	r20, r24
 212:	02 c0       	rjmp	.+4      	; 0x218 <dio_pinwrite+0x30>
 214:	44 0f       	add	r20, r20
 216:	55 1f       	adc	r21, r21
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <dio_pinwrite+0x2c>
 21c:	ba 01       	movw	r22, r20
 21e:	62 2b       	or	r22, r18
 220:	6b bb       	out	0x1b, r22	; 27
 222:	08 95       	ret
		}
		else
		{
			clearbit(PORTA,pin);
 224:	2b b3       	in	r18, 0x1b	; 27
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	ac 01       	movw	r20, r24
 22c:	02 c0       	rjmp	.+4      	; 0x232 <dio_pinwrite+0x4a>
 22e:	44 0f       	add	r20, r20
 230:	55 1f       	adc	r21, r21
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <dio_pinwrite+0x46>
 236:	ba 01       	movw	r22, r20
 238:	60 95       	com	r22
 23a:	62 23       	and	r22, r18
 23c:	6b bb       	out	0x1b, r22	; 27
 23e:	08 95       	ret
		}
		break;
		case 'B':
		if (value)
 240:	44 23       	and	r20, r20
 242:	69 f0       	breq	.+26     	; 0x25e <dio_pinwrite+0x76>
		{
			setbit(PORTB,pin);
 244:	28 b3       	in	r18, 0x18	; 24
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	ac 01       	movw	r20, r24
 24c:	02 c0       	rjmp	.+4      	; 0x252 <dio_pinwrite+0x6a>
 24e:	44 0f       	add	r20, r20
 250:	55 1f       	adc	r21, r21
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <dio_pinwrite+0x66>
 256:	ba 01       	movw	r22, r20
 258:	62 2b       	or	r22, r18
 25a:	68 bb       	out	0x18, r22	; 24
 25c:	08 95       	ret
		}
		else
		{
			clearbit(PORTB,pin);
 25e:	28 b3       	in	r18, 0x18	; 24
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	ac 01       	movw	r20, r24
 266:	02 c0       	rjmp	.+4      	; 0x26c <dio_pinwrite+0x84>
 268:	44 0f       	add	r20, r20
 26a:	55 1f       	adc	r21, r21
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <dio_pinwrite+0x80>
 270:	ba 01       	movw	r22, r20
 272:	60 95       	com	r22
 274:	62 23       	and	r22, r18
 276:	68 bb       	out	0x18, r22	; 24
 278:	08 95       	ret
		}
		break;
		case 'C':
		if (value)
 27a:	44 23       	and	r20, r20
 27c:	69 f0       	breq	.+26     	; 0x298 <dio_pinwrite+0xb0>
		{
			setbit(PORTC,pin);
 27e:	25 b3       	in	r18, 0x15	; 21
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	ac 01       	movw	r20, r24
 286:	02 c0       	rjmp	.+4      	; 0x28c <dio_pinwrite+0xa4>
 288:	44 0f       	add	r20, r20
 28a:	55 1f       	adc	r21, r21
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <dio_pinwrite+0xa0>
 290:	ba 01       	movw	r22, r20
 292:	62 2b       	or	r22, r18
 294:	65 bb       	out	0x15, r22	; 21
 296:	08 95       	ret
		}
		else
		{
			clearbit(PORTC,pin);
 298:	25 b3       	in	r18, 0x15	; 21
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	ac 01       	movw	r20, r24
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <dio_pinwrite+0xbe>
 2a2:	44 0f       	add	r20, r20
 2a4:	55 1f       	adc	r21, r21
 2a6:	6a 95       	dec	r22
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <dio_pinwrite+0xba>
 2aa:	ba 01       	movw	r22, r20
 2ac:	60 95       	com	r22
 2ae:	62 23       	and	r22, r18
 2b0:	65 bb       	out	0x15, r22	; 21
 2b2:	08 95       	ret
		}
		break;
		case 'D':
		if (value)
 2b4:	44 23       	and	r20, r20
 2b6:	69 f0       	breq	.+26     	; 0x2d2 <dio_pinwrite+0xea>
		{
			setbit(PORTD,pin);
 2b8:	22 b3       	in	r18, 0x12	; 18
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	ac 01       	movw	r20, r24
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <dio_pinwrite+0xde>
 2c2:	44 0f       	add	r20, r20
 2c4:	55 1f       	adc	r21, r21
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <dio_pinwrite+0xda>
 2ca:	ba 01       	movw	r22, r20
 2cc:	62 2b       	or	r22, r18
 2ce:	62 bb       	out	0x12, r22	; 18
 2d0:	08 95       	ret
		}
		else
		{
			clearbit(PORTD,pin);
 2d2:	22 b3       	in	r18, 0x12	; 18
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	ac 01       	movw	r20, r24
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <dio_pinwrite+0xf8>
 2dc:	44 0f       	add	r20, r20
 2de:	55 1f       	adc	r21, r21
 2e0:	6a 95       	dec	r22
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <dio_pinwrite+0xf4>
 2e4:	ba 01       	movw	r22, r20
 2e6:	60 95       	com	r22
 2e8:	62 23       	and	r22, r18
 2ea:	62 bb       	out	0x12, r22	; 18
 2ec:	08 95       	ret

000002ee <dio_portwrite>:
		break;
	}
}
void dio_portwrite(unsigned char port,unsigned char value)
{
	switch(port)
 2ee:	82 34       	cpi	r24, 0x42	; 66
 2f0:	61 f0       	breq	.+24     	; 0x30a <dio_portwrite+0x1c>
 2f2:	83 34       	cpi	r24, 0x43	; 67
 2f4:	18 f4       	brcc	.+6      	; 0x2fc <dio_portwrite+0xe>
 2f6:	81 34       	cpi	r24, 0x41	; 65
 2f8:	69 f4       	brne	.+26     	; 0x314 <dio_portwrite+0x26>
 2fa:	05 c0       	rjmp	.+10     	; 0x306 <dio_portwrite+0x18>
 2fc:	83 34       	cpi	r24, 0x43	; 67
 2fe:	39 f0       	breq	.+14     	; 0x30e <dio_portwrite+0x20>
 300:	84 34       	cpi	r24, 0x44	; 68
 302:	41 f4       	brne	.+16     	; 0x314 <dio_portwrite+0x26>
 304:	06 c0       	rjmp	.+12     	; 0x312 <dio_portwrite+0x24>
	{
		case 'A':
		portval(PORTA,value);
 306:	6b bb       	out	0x1b, r22	; 27
		break;
 308:	08 95       	ret
		case 'B':
		portval(PORTB,value);
 30a:	68 bb       	out	0x18, r22	; 24
		break;
 30c:	08 95       	ret
		case 'C':
		portval(PORTC,value);
 30e:	65 bb       	out	0x15, r22	; 21
		break;
 310:	08 95       	ret
		case 'D':
		portval(PORTD,value);
 312:	62 bb       	out	0x12, r22	; 18
 314:	08 95       	ret

00000316 <dio_pintoggle>:
		break;
	}
}
void dio_pintoggle(unsigned char port,unsigned char pin)
{
	switch (port)
 316:	82 34       	cpi	r24, 0x42	; 66
 318:	b9 f0       	breq	.+46     	; 0x348 <dio_pintoggle+0x32>
 31a:	83 34       	cpi	r24, 0x43	; 67
 31c:	18 f4       	brcc	.+6      	; 0x324 <dio_pintoggle+0xe>
 31e:	81 34       	cpi	r24, 0x41	; 65
 320:	c9 f5       	brne	.+114    	; 0x394 <dio_pintoggle+0x7e>
 322:	05 c0       	rjmp	.+10     	; 0x32e <dio_pintoggle+0x18>
 324:	83 34       	cpi	r24, 0x43	; 67
 326:	e9 f0       	breq	.+58     	; 0x362 <dio_pintoggle+0x4c>
 328:	84 34       	cpi	r24, 0x44	; 68
 32a:	a1 f5       	brne	.+104    	; 0x394 <dio_pintoggle+0x7e>
 32c:	27 c0       	rjmp	.+78     	; 0x37c <dio_pintoggle+0x66>
	{
	case 'A':
	togglebit(PORTA,pin);
 32e:	2b b3       	in	r18, 0x1b	; 27
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	ac 01       	movw	r20, r24
 336:	02 c0       	rjmp	.+4      	; 0x33c <dio_pintoggle+0x26>
 338:	44 0f       	add	r20, r20
 33a:	55 1f       	adc	r21, r21
 33c:	6a 95       	dec	r22
 33e:	e2 f7       	brpl	.-8      	; 0x338 <dio_pintoggle+0x22>
 340:	ba 01       	movw	r22, r20
 342:	62 27       	eor	r22, r18
 344:	6b bb       	out	0x1b, r22	; 27
	break;
 346:	08 95       	ret
	case 'B':
	togglebit(PORTB,pin);
 348:	28 b3       	in	r18, 0x18	; 24
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	ac 01       	movw	r20, r24
 350:	02 c0       	rjmp	.+4      	; 0x356 <dio_pintoggle+0x40>
 352:	44 0f       	add	r20, r20
 354:	55 1f       	adc	r21, r21
 356:	6a 95       	dec	r22
 358:	e2 f7       	brpl	.-8      	; 0x352 <dio_pintoggle+0x3c>
 35a:	ba 01       	movw	r22, r20
 35c:	62 27       	eor	r22, r18
 35e:	68 bb       	out	0x18, r22	; 24
	break;
 360:	08 95       	ret
	case 'C':
	togglebit(PORTC,pin);
 362:	25 b3       	in	r18, 0x15	; 21
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	ac 01       	movw	r20, r24
 36a:	02 c0       	rjmp	.+4      	; 0x370 <dio_pintoggle+0x5a>
 36c:	44 0f       	add	r20, r20
 36e:	55 1f       	adc	r21, r21
 370:	6a 95       	dec	r22
 372:	e2 f7       	brpl	.-8      	; 0x36c <dio_pintoggle+0x56>
 374:	ba 01       	movw	r22, r20
 376:	62 27       	eor	r22, r18
 378:	65 bb       	out	0x15, r22	; 21
	break;
 37a:	08 95       	ret
	case 'D':
	togglebit(PORTD,pin);
 37c:	22 b3       	in	r18, 0x12	; 18
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	ac 01       	movw	r20, r24
 384:	02 c0       	rjmp	.+4      	; 0x38a <dio_pintoggle+0x74>
 386:	44 0f       	add	r20, r20
 388:	55 1f       	adc	r21, r21
 38a:	6a 95       	dec	r22
 38c:	e2 f7       	brpl	.-8      	; 0x386 <dio_pintoggle+0x70>
 38e:	ba 01       	movw	r22, r20
 390:	62 27       	eor	r22, r18
 392:	62 bb       	out	0x12, r22	; 18
 394:	08 95       	ret

00000396 <dio_porttoggle>:
	break;
	}
}
void dio_porttoggle(unsigned char port)
{
	switch(port)
 396:	82 34       	cpi	r24, 0x42	; 66
 398:	71 f0       	breq	.+28     	; 0x3b6 <dio_porttoggle+0x20>
 39a:	83 34       	cpi	r24, 0x43	; 67
 39c:	18 f4       	brcc	.+6      	; 0x3a4 <dio_porttoggle+0xe>
 39e:	81 34       	cpi	r24, 0x41	; 65
 3a0:	a9 f4       	brne	.+42     	; 0x3cc <dio_porttoggle+0x36>
 3a2:	05 c0       	rjmp	.+10     	; 0x3ae <dio_porttoggle+0x18>
 3a4:	83 34       	cpi	r24, 0x43	; 67
 3a6:	59 f0       	breq	.+22     	; 0x3be <dio_porttoggle+0x28>
 3a8:	84 34       	cpi	r24, 0x44	; 68
 3aa:	81 f4       	brne	.+32     	; 0x3cc <dio_porttoggle+0x36>
 3ac:	0c c0       	rjmp	.+24     	; 0x3c6 <dio_porttoggle+0x30>
	{
		case'A':
		toggleport(PORTA);
 3ae:	8b b3       	in	r24, 0x1b	; 27
 3b0:	80 95       	com	r24
 3b2:	8b bb       	out	0x1b, r24	; 27
		break;
 3b4:	08 95       	ret
		case'B':
		toggleport(PORTB);
 3b6:	88 b3       	in	r24, 0x18	; 24
 3b8:	80 95       	com	r24
 3ba:	88 bb       	out	0x18, r24	; 24
		break;
 3bc:	08 95       	ret
		case'C':
		toggleport(PORTC);
 3be:	85 b3       	in	r24, 0x15	; 21
 3c0:	80 95       	com	r24
 3c2:	85 bb       	out	0x15, r24	; 21
		break;
 3c4:	08 95       	ret
		case'D':
		toggleport(PORTD);
 3c6:	82 b3       	in	r24, 0x12	; 18
 3c8:	80 95       	com	r24
 3ca:	82 bb       	out	0x12, r24	; 18
 3cc:	08 95       	ret

000003ce <dio_pinread>:
	}
}
unsigned char dio_pinread(unsigned char port,unsigned char pin)
{
	unsigned char ret_value=0;
	switch(port)
 3ce:	82 34       	cpi	r24, 0x42	; 66
 3d0:	a1 f0       	breq	.+40     	; 0x3fa <dio_pinread+0x2c>
 3d2:	83 34       	cpi	r24, 0x43	; 67
 3d4:	18 f4       	brcc	.+6      	; 0x3dc <dio_pinread+0xe>
 3d6:	81 34       	cpi	r24, 0x41	; 65
 3d8:	71 f5       	brne	.+92     	; 0x436 <dio_pinread+0x68>
 3da:	05 c0       	rjmp	.+10     	; 0x3e6 <dio_pinread+0x18>
 3dc:	83 34       	cpi	r24, 0x43	; 67
 3de:	b9 f0       	breq	.+46     	; 0x40e <dio_pinread+0x40>
 3e0:	84 34       	cpi	r24, 0x44	; 68
 3e2:	49 f5       	brne	.+82     	; 0x436 <dio_pinread+0x68>
 3e4:	1e c0       	rjmp	.+60     	; 0x422 <dio_pinread+0x54>
	{
		case 'A':
		ret_value=readbit(PINA,pin);
 3e6:	29 b3       	in	r18, 0x19	; 25
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	c9 01       	movw	r24, r18
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <dio_pinread+0x24>
 3ee:	95 95       	asr	r25
 3f0:	87 95       	ror	r24
 3f2:	6a 95       	dec	r22
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <dio_pinread+0x20>
 3f6:	81 70       	andi	r24, 0x01	; 1
		break;
 3f8:	08 95       	ret
		case 'B':
		ret_value=readbit(PINB,pin);
 3fa:	26 b3       	in	r18, 0x16	; 22
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	c9 01       	movw	r24, r18
 400:	02 c0       	rjmp	.+4      	; 0x406 <dio_pinread+0x38>
 402:	95 95       	asr	r25
 404:	87 95       	ror	r24
 406:	6a 95       	dec	r22
 408:	e2 f7       	brpl	.-8      	; 0x402 <dio_pinread+0x34>
 40a:	81 70       	andi	r24, 0x01	; 1
		break;
 40c:	08 95       	ret
		case 'C':
		ret_value=readbit(PINC,pin);
 40e:	23 b3       	in	r18, 0x13	; 19
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	c9 01       	movw	r24, r18
 414:	02 c0       	rjmp	.+4      	; 0x41a <dio_pinread+0x4c>
 416:	95 95       	asr	r25
 418:	87 95       	ror	r24
 41a:	6a 95       	dec	r22
 41c:	e2 f7       	brpl	.-8      	; 0x416 <dio_pinread+0x48>
 41e:	81 70       	andi	r24, 0x01	; 1
		break;
 420:	08 95       	ret
		case 'D':
		ret_value=readbit(PIND,pin);
 422:	20 b3       	in	r18, 0x10	; 16
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	c9 01       	movw	r24, r18
 428:	02 c0       	rjmp	.+4      	; 0x42e <dio_pinread+0x60>
 42a:	95 95       	asr	r25
 42c:	87 95       	ror	r24
 42e:	6a 95       	dec	r22
 430:	e2 f7       	brpl	.-8      	; 0x42a <dio_pinread+0x5c>
 432:	81 70       	andi	r24, 0x01	; 1
		break;
 434:	08 95       	ret
		break;
	}
}
unsigned char dio_pinread(unsigned char port,unsigned char pin)
{
	unsigned char ret_value=0;
 436:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		break;
	}
	return ret_value;
}
 438:	08 95       	ret

0000043a <dio_portread>:
unsigned char dio_portread(unsigned char port)
{
	unsigned char ret_value=0;
	switch (port)
 43a:	82 34       	cpi	r24, 0x42	; 66
 43c:	61 f0       	breq	.+24     	; 0x456 <dio_portread+0x1c>
 43e:	83 34       	cpi	r24, 0x43	; 67
 440:	18 f4       	brcc	.+6      	; 0x448 <dio_portread+0xe>
 442:	81 34       	cpi	r24, 0x41	; 65
 444:	71 f4       	brne	.+28     	; 0x462 <dio_portread+0x28>
 446:	05 c0       	rjmp	.+10     	; 0x452 <dio_portread+0x18>
 448:	83 34       	cpi	r24, 0x43	; 67
 44a:	39 f0       	breq	.+14     	; 0x45a <dio_portread+0x20>
 44c:	84 34       	cpi	r24, 0x44	; 68
 44e:	49 f4       	brne	.+18     	; 0x462 <dio_portread+0x28>
 450:	06 c0       	rjmp	.+12     	; 0x45e <dio_portread+0x24>
	{
		case 'A':
		ret_value=PINA;
 452:	89 b3       	in	r24, 0x19	; 25
		break;
 454:	08 95       	ret
		case 'B':
		ret_value=PINB;
 456:	86 b3       	in	r24, 0x16	; 22
		break;
 458:	08 95       	ret
		case 'C':
		ret_value=PINC;
 45a:	83 b3       	in	r24, 0x13	; 19
		break;
 45c:	08 95       	ret
		case 'D':
		ret_value=PIND;
 45e:	80 b3       	in	r24, 0x10	; 16
		break;
 460:	08 95       	ret
	}
	return ret_value;
}
unsigned char dio_portread(unsigned char port)
{
	unsigned char ret_value=0;
 462:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		break;
	}
	return ret_value;
 464:	08 95       	ret

00000466 <main>:
#define test_enable

int main(void)
{
	#ifdef test_enable
	test();
 466:	0e 94 5e 02 	call	0x4bc	; 0x4bc <test>
	#endif
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	08 95       	ret

00000470 <sevensegment_setdirection>:
#define common_anode
//#define common_cathode

void sevensegment_setdirection(unsigned char port)
{
	dio_setportdirection(port,1);
 470:	61 e0       	ldi	r22, 0x01	; 1
 472:	0e 94 cc 00 	call	0x198	; 0x198 <dio_setportdirection>
}
 476:	08 95       	ret

00000478 <sevensegment_show>:
void sevensegment_show(unsigned char port,unsigned char numpattern)
{
 478:	cf 93       	push	r28
 47a:	df 93       	push	r29
 47c:	cd b7       	in	r28, 0x3d	; 61
 47e:	de b7       	in	r29, 0x3e	; 62
 480:	2a 97       	sbiw	r28, 0x0a	; 10
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	f8 94       	cli
 486:	de bf       	out	0x3e, r29	; 62
 488:	0f be       	out	0x3f, r0	; 63
 48a:	cd bf       	out	0x3d, r28	; 61
	#ifdef common_cathode
	unsigned char arr[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x47,0x7f,0x6f};
	#elif defined common_anode
	unsigned char arr[]={~0x3f,~0x06,~0x5b,~0x4f,~0x66,~0x6d,~0x7d,~0x47,~0x7f,~0x6f};
 48c:	de 01       	movw	r26, r28
 48e:	11 96       	adiw	r26, 0x01	; 1
 490:	e0 e6       	ldi	r30, 0x60	; 96
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	9a e0       	ldi	r25, 0x0A	; 10
 496:	01 90       	ld	r0, Z+
 498:	0d 92       	st	X+, r0
 49a:	91 50       	subi	r25, 0x01	; 1
 49c:	e1 f7       	brne	.-8      	; 0x496 <sevensegment_show+0x1e>
	#endif
	dio_portwrite(port,arr[numpattern]);
 49e:	fe 01       	movw	r30, r28
 4a0:	e6 0f       	add	r30, r22
 4a2:	f1 1d       	adc	r31, r1
 4a4:	61 81       	ldd	r22, Z+1	; 0x01
 4a6:	0e 94 77 01 	call	0x2ee	; 0x2ee <dio_portwrite>
}
 4aa:	2a 96       	adiw	r28, 0x0a	; 10
 4ac:	0f b6       	in	r0, 0x3f	; 63
 4ae:	f8 94       	cli
 4b0:	de bf       	out	0x3e, r29	; 62
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	cd bf       	out	0x3d, r28	; 61
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	08 95       	ret

000004bc <test>:

void test(void)
{
	sevensegment_setdirection('D');
 4bc:	84 e4       	ldi	r24, 0x44	; 68
 4be:	0e 94 38 02 	call	0x470	; 0x470 <sevensegment_setdirection>
	unsigned char counter=0;
	while(1)
	{
		for(counter=0;counter<=9;counter++)
 4c2:	c0 e0       	ldi	r28, 0x00	; 0
 4c4:	d0 e0       	ldi	r29, 0x00	; 0
		{
			sevensegment_show('D',counter);
 4c6:	84 e4       	ldi	r24, 0x44	; 68
 4c8:	6c 2f       	mov	r22, r28
 4ca:	0e 94 3c 02 	call	0x478	; 0x478 <sevensegment_show>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ce:	8f ef       	ldi	r24, 0xFF	; 255
 4d0:	99 e6       	ldi	r25, 0x69	; 105
 4d2:	a8 e1       	ldi	r26, 0x18	; 24
 4d4:	81 50       	subi	r24, 0x01	; 1
 4d6:	90 40       	sbci	r25, 0x00	; 0
 4d8:	a0 40       	sbci	r26, 0x00	; 0
 4da:	e1 f7       	brne	.-8      	; 0x4d4 <test+0x18>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <test+0x22>
 4de:	00 00       	nop
{
	sevensegment_setdirection('D');
	unsigned char counter=0;
	while(1)
	{
		for(counter=0;counter<=9;counter++)
 4e0:	cf 5f       	subi	r28, 0xFF	; 255
 4e2:	ca 30       	cpi	r28, 0x0A	; 10
 4e4:	80 f3       	brcs	.-32     	; 0x4c6 <test+0xa>
 4e6:	cd 2f       	mov	r28, r29
 4e8:	ee cf       	rjmp	.-36     	; 0x4c6 <test+0xa>

000004ea <_exit>:
 4ea:	f8 94       	cli

000004ec <__stop_program>:
 4ec:	ff cf       	rjmp	.-2      	; 0x4ec <__stop_program>
